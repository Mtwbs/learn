feat: add some feature.

# <类型>: (类型的值见下面描述) <主题> (最多20个字符)
# <内容> - <内容>(最多20个字符)

# ---------------------------------------
# 类型值:
#    feat (新功能)
#    fix (bug修复)
#    docs (文档改动)
#    style (格式化, 缺失分号等; 不包括生产代码变动)
#    refactor (重构代码)
#    about (分支描述)
#    test (添加缺失的测试, 重构测试, 不包括生产代码变动)
#    chore (更新 webpack 任务等; 不包括生产代码变动)
# ---------------------------------------
# 说明:
#    每个改动必须有类型、主题。
#    主题行英文使用大写，中文无此限制。
#    内容用于解释为什么和是什么,而不是怎么做。
#    内容多行时以'-'分隔，以标点结尾。
#    多个改动使用空行分隔。
#    建议使用英文描述。
#    about(分支描述)是对分支进行补充说明， 需要包含开发者名字和说明
# ---------------------------------------
#  不带body:
#   例子: 
#     fix<类型>: 退出登陆可能出现的一个空指针异常<主题>
# ---------------------------------------
#  带body(可支持描述多个改动):
#   例子:
#    fix <类型>: 退出登陆可能出现的一个空指针异常 <主题>
#    因为数值变量小数点位设置误差导致的此 bug。 <内容>
#    
#    feat <类型>: 用户广告点击上报 <主题>
# ---------------------------------------
# about: 紧急修复线上支付key设置过期的 bug (ben)
# ---------------------------------------

# Please enter the commit message for your changes. Lines starting
# with '#' will be ignored, and an empty message aborts the commit.
#
# On branch master
# Your branch is up to date with 'origin/master'.
#
# Changes to be committed:
#	modified:   src/App.tsx
#	new file:   src/components/d3/histogram.tsx
#	modified:   src/components/gantt/index.tsx
#
# ------------------------ >8 ------------------------
# Do not modify or remove the line above.
# Everything below it will be ignored.
diff --git a/learn-d3/src/App.tsx b/learn-d3/src/App.tsx
index 1652ef74..f8828c06 100644
--- a/learn-d3/src/App.tsx
+++ b/learn-d3/src/App.tsx
@@ -1,15 +1,15 @@
 import React from 'react';
 // import D3 from './components/d3';
-import ScatterPlot from './components/d3/scatter_plot';
-// import Gantt from './components/gantt';
+// import ScatterPlot from './components/d3/scatter_plot';
+import Gantt from './components/gantt';
 import './App.css';
 
 function App() {
   return (
     <div className="App">
       {/* <D3 /> */}
-      <ScatterPlot />
-      {/* <Gantt /> */}
+      {/* <ScatterPlot /> */}
+      <Gantt />
     </div>
   );
 }
diff --git a/learn-d3/src/components/d3/histogram.tsx b/learn-d3/src/components/d3/histogram.tsx
new file mode 100644
index 00000000..558db891
--- /dev/null
+++ b/learn-d3/src/components/d3/histogram.tsx
@@ -0,0 +1,96 @@
+import React, { useRef, useEffect } from "react";
+import { select, scaleLinear, extent, histogram, max } from "d3";
+import dataset from '../../data/my_weather_data.json';
+import { objHasKey } from "../../util/obj_has_key";
+
+type Dataset = typeof dataset;
+
+interface Dimensions {
+  width: number,
+  height: number,
+  margin: {
+    top: number,
+    right: number,
+    bottom: number,
+    left: number,
+  }
+}
+
+const width = 600;
+
+const dimensions = {
+  width,
+  height: width * 0.6,
+  margin: {
+    top: 30,
+    right: 10,
+    bottom: 50,
+    left: 50
+  }
+}
+
+const boundedWidth = dimensions.width - dimensions.margin.left - dimensions.margin.right;
+const boundsHeight = dimensions.height - dimensions.margin.top - dimensions.margin.bottom;
+
+/**
+ * 在图表父元素中添加 svg 和 g
+ */
+const drawBounds = (dimensions: Dimensions) => {
+  const wrapper = select('#svg-wrapper');
+  const svg = wrapper.append("svg")
+    .attr('width', dimensions.width)
+    .attr('height', dimensions.height)
+  const bounds = svg.append('g')
+    .attr('width', boundedWidth)
+    .attr('height', boundsHeight)
+    .style("transform", `translate(${dimensions.margin.left}px, ${dimensions.margin.top}px)`);
+  return { wrapper, svg, bounds }
+}
+
+// DONE: 设置数据通道函数
+const metricAccessor = (d: Dataset) => {
+  if (objHasKey(d, 'humidity')) {
+    // @ts-ignore
+    return d.humidity;
+  } return undefined;
+}
+
+// NOTE: 新建比例尺
+const xScale = scaleLinear()
+  .domain(extent(Array.from(dataset as any, metricAccessor) as any) as any)
+  .range([0, boundedWidth])
+  .nice(); // 最后优化小数点，保留一位小数
+
+
+// NOTE: 设置生成器
+const binsGenerator = histogram()
+  .domain(xScale.domain() as any)
+  .value(metricAccessor as any)
+  .thresholds(12);
+
+const bins = binsGenerator(dataset as any);
+
+const yAccessor = (d: Dataset) => {
+  if (objHasKey(d, 'length')) {
+    // @ts-ignore
+    return d.length;
+  } return undefined;
+}
+
+const yScale = scaleLinear()
+  .domain([0, max(bins as any, yAccessor) as number])
+  .range([boundsHeight, 0])
+  .nice()
+
+export default function Histogram() {
+  const svgWrapRef = useRef(null);
+  useEffect(() => {
+    if (svgWrapRef.current) {
+      // 调用函数绘制图表
+      const { bounds } = drawBounds(dimensions);
+
+    }
+  }, []);
+  return <div id="svg-wrapper" ref={svgWrapRef}>
+  </div>
+}
diff --git a/learn-d3/src/components/gantt/index.tsx b/learn-d3/src/components/gantt/index.tsx
index 6fb3af21..2a759bb1 100644
--- a/learn-d3/src/components/gantt/index.tsx
+++ b/learn-d3/src/components/gantt/index.tsx
@@ -3,14 +3,15 @@ import * as d3 from "d3";
 
 import "./index.css";
 
-const w = 800;
+const w = 1616;
 const h = 400;
 const topPadding = 75;
 const sidePadding = 75;
-const barHeight = 20;
-const gap = barHeight + 4;
+const barHeight = 10;
+const gap = barHeight + 8;
 
 interface Task {
+  id: string,
   task: string;
   type: "active" | "finished";
   startTime: string;
@@ -18,24 +19,64 @@ interface Task {
 }
 
 const taskArray: Task[] = [
+
   {
-    task: "conceptualize",
+    id: "1",
+    task: "优化注册",
+    type: "active",
+    startTime: "2013-2-1 11:00", // year/month/day hover:minute
+    endTime: "2013-2-1 11:10",
+  },
+  {
+    id: "1",
+    task: "优化样式",
     type: "active",
     startTime: "2013-2-1 12:00", // year/month/day hover:minute
     endTime: "2013-2-1 12:30",
   },
   {
-    task: "conceptualize",
+    id: "1",
+    task: "优化",
+    type: "active",
+    startTime: "2013-2-1 10:00", // year/month/day hover:minute
+    endTime: "2013-2-1 11:00",
+  },
+  {
+    id: '2',
+    task: "完成时间轴组件",
     type: "active",
     startTime: "2013-2-1 14:00", // year/month/day hover:minute
     endTime: "2013-2-1 14:20",
   },
+  {
+    id: '2',
+    task: "添加时间功能",
+    type: "active",
+    startTime: "2013-2-2 14:40", // year/month/day hover:minute
+    endTime: "2013-2-12 15:20",
+  },
 ];
 
+d3.timeFormatDefaultLocale({
+  dateTime: "%a %b %e %X %Y",
+  date: "%Y/%-m/%-d",
+  time: "%H:%M:%S",
+  periods: ["上午", "下午"],
+  days: ["星期日", "星期一", "星期二", "星期三", "星期四", "星期五", "星期六"],
+  shortDays: ["周日", "周一", "周二", "周三", "周四", "周五", "周六"],
+  months: ["一月", "二月", "三月", "四月", "五月", "六月", "七月", "八月", "九月", "十月", "十一月", "十二月"],
+  shortMonths: ["1", "2", "3", "4", "5", "6", "7", "8", "9", "10", "11", "12"]
+});
+
+
+
 const dateParser = d3.timeParse("%Y-%m-%d %H:%M");
 const xAccessorMin = (d: Task) => dateParser(d.startTime) as Date;
 const xAccessorMax = (d: Task) => dateParser(d.endTime) as Date;
 
+// @ts-ignore
+console.log((d3.max(taskArray, xAccessorMax) - d3.min(taskArray, xAccessorMin)) / 1000 / 60 / 60 / 24)
+
 const xScale = d3
   .scaleTime()
   .domain([
@@ -44,15 +85,36 @@ const xScale = d3
   ])
   .range([0, w - 150]);
 
+
+// 绘制 y 轴
+const domain = Array.from(taskArray, (task: Task) => task.task);
+domain.unshift('');
+
+const rangeData = Array.from(taskArray, (_, index) => (index * gap + topPadding + barHeight / 2));
+rangeData.unshift(45);
+rangeData.push(h - 40);
+
+const yScale = d3.scaleOrdinal<string, number>()
+  .domain(domain)
+  .range(rangeData as number[])
+
 function makeGrid(ctx: {
   svg: d3.Selection<SVGSVGElement, unknown, HTMLElement, any>;
 }) {
-  const xAxisGenerator = d3.axisBottom(xScale).ticks(d3.timeMinute.every(15));
+  const xAxisGenerator = d3.axisBottom(xScale)
+    .ticks(d3.timeHour.every(24))
+  .tickFormat(d3.timeFormat("%-m月 %-d日") as any);
+
   const { svg } = ctx;
   const xAxis = svg
     .append("g")
     .attr("transform", "translate(" + sidePadding + ", " + (h - 50) + ")");
   xAxisGenerator(xAxis);
+
+  const yAxisGenerator = d3.axisLeft(yScale);
+  svg.append('g')
+    .call(yAxisGenerator)
+    .attr("transform", `translate(${sidePadding})`);
 }
 
 function drawRects(ctx: {
@@ -66,8 +128,8 @@ function drawRects(ctx: {
     .data(taskArray)
     .enter()
     .append("rect")
-    .attr("rx", 3)
-    .attr("ry", 3)
+    .attr("rx", 5)
+    .attr("ry", 5)
     .attr("x", (d: Task) => {
       return xScale(dateParser(d.startTime) as Date) + sidePadding;
     })
@@ -78,11 +140,12 @@ function drawRects(ctx: {
       return (
         xScale(dateParser(d.endTime) as Date) -
         xScale(dateParser(d.startTime) as Date)
-      );
+      ) * 10;
     })
     .attr("height", barHeight)
-    .attr("stroke", "none")
-    .attr("fill", "#69c0ff");
+    .attr("stroke", "#69c0ff")
+    .attr("stroke-dasharray", "3,3,3")
+    .attr("fill", "rgba(0,0,0,0)");
 }
 
 export default function Gantt() {
