{"id":"node_modules/rxjs-compat/operator/finally.js","dependencies":[{"name":"/Users/ben/Documents/w/myproject/learn/rxjs/node_modules/rxjs-compat/package.json","includedInParent":true,"mtime":499162500000},{"name":"/Users/ben/Documents/w/myproject/learn/rxjs/package.json","includedInParent":true,"mtime":1531650673478},{"name":"rxjs/operators","loc":{"line":3,"column":26},"parent":"/Users/ben/Documents/w/myproject/learn/rxjs/node_modules/rxjs-compat/operator/finally.js","resolved":"/Users/ben/Documents/w/myproject/learn/rxjs/node_modules/rxjs/_esm5/operators/index.js"}],"generated":{"js":"\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar operators_1 = require(\"rxjs/operators\");\n/**\n * Returns an Observable that mirrors the source Observable, but will call a specified function when\n * the source terminates on complete, error or unsubscribe.\n *\n * <span class=\"informal\">Ensure a given function will be called when a stream ends, no matter why it ended.</span>\n *\n * `finally` method accepts as a single parameter a function. This function does not accept any parameters and\n * should not return anything. It will be called whenever source Observable completes, errors or is unsubscribed,\n * which makes it good candidate to perform any necessary clean up or side effects when Observable terminates,\n * no matter how or why it terminated.\n *\n * Observable returned by `finally` will simply mirror source Observable - each time it is subscribed, source\n * Observable will be subscribed underneath.\n *\n * Note that behavior of `finally` will be repeated per every subscription, so if resulting Observable has\n * many subscribers, function passed to `finally` might be potentially called multiple times.\n *\n * Remember also that `finally` differs quite a lot from passing complete or error handler to {@link subscribe}. It will\n * return an Observable which can be further chained, while `subscribe` returns Subscription, basically ending Observable\n * chain. Function passed to `finally` will be called also when consumer of resulting Observable unsubscribes from it,\n * while handlers passed to `subscribe` will not (even complete handler). But most importantly, `finally` does not start\n * an execution of source Observable, like `subscribe` does, allowing you to set up all necessary hooks before\n * passing Observable further, even without specific knowledge how or when it will be used.\n *\n *\n * @example <caption>Call finally after complete notification</caption>\n * Rx.Observable.of(1, 2, 3)\n * .finally(() => console.log('I was finalized!'))\n * .map(x => x * 2) // `finally` returns an Observable, so we still can chain operators.\n * .subscribe(\n *   val => console.log(val),\n *   err => {},\n *   () => console.log('I completed!')\n * );\n *\n * // Logs:\n * // 1\n * // 2\n * // 3\n * // \"I completed!\"\n * // \"I was finalized!\"\n *\n *\n *\n * @example <caption>Call finally after consumer unsubscribes</caption>\n * const o = Rx.Observable.interval(1000)\n * .finally(() => console.log('Timer stopped'));\n *\n * const subscription = o.subscribe(\n *   val => console.log(val),\n *   err => {},\n *   () => console.log('Complete!') // Will not be called, since complete handler\n * );                               // does not react to unsubscription, just to\n *                                  // complete notification sent by the Observable itself.\n *\n * setTimeout(() => subscription.unsubscribe(), 2500);\n *\n * // Logs:\n * // 0 after 1s\n * // 1 after 2s\n * // \"Timer stopped\" after 2.5s\n *\n * @see {@link using}\n *\n * @param {function} callback Function to be called when source terminates (completes, errors or is unsubscribed).\n * @return {Observable} An Observable that mirrors the source, but will call the specified function on termination.\n * @method finally\n * @name finally\n * @owner Observable\n */\nfunction _finally(callback) {\n    return operators_1.finalize(callback)(this);\n}\nexports._finally = _finally;\n//# sourceMappingURL=finally.js.map","map":{"mappings":[{"source":"node_modules/rxjs-compat/operator/finally.js","original":{"line":1,"column":0},"generated":{"line":1,"column":0}},{"source":"node_modules/rxjs-compat/operator/finally.js","original":{"line":2,"column":0},"generated":{"line":2,"column":0}},{"source":"node_modules/rxjs-compat/operator/finally.js","original":{"line":3,"column":0},"generated":{"line":3,"column":0}},{"source":"node_modules/rxjs-compat/operator/finally.js","original":{"line":4,"column":0},"generated":{"line":4,"column":0}},{"source":"node_modules/rxjs-compat/operator/finally.js","original":{"line":5,"column":0},"generated":{"line":5,"column":0}},{"source":"node_modules/rxjs-compat/operator/finally.js","original":{"line":6,"column":0},"generated":{"line":6,"column":0}},{"source":"node_modules/rxjs-compat/operator/finally.js","original":{"line":7,"column":0},"generated":{"line":7,"column":0}},{"source":"node_modules/rxjs-compat/operator/finally.js","original":{"line":8,"column":0},"generated":{"line":8,"column":0}},{"source":"node_modules/rxjs-compat/operator/finally.js","original":{"line":9,"column":0},"generated":{"line":9,"column":0}},{"source":"node_modules/rxjs-compat/operator/finally.js","original":{"line":10,"column":0},"generated":{"line":10,"column":0}},{"source":"node_modules/rxjs-compat/operator/finally.js","original":{"line":11,"column":0},"generated":{"line":11,"column":0}},{"source":"node_modules/rxjs-compat/operator/finally.js","original":{"line":12,"column":0},"generated":{"line":12,"column":0}},{"source":"node_modules/rxjs-compat/operator/finally.js","original":{"line":13,"column":0},"generated":{"line":13,"column":0}},{"source":"node_modules/rxjs-compat/operator/finally.js","original":{"line":14,"column":0},"generated":{"line":14,"column":0}},{"source":"node_modules/rxjs-compat/operator/finally.js","original":{"line":15,"column":0},"generated":{"line":15,"column":0}},{"source":"node_modules/rxjs-compat/operator/finally.js","original":{"line":16,"column":0},"generated":{"line":16,"column":0}},{"source":"node_modules/rxjs-compat/operator/finally.js","original":{"line":17,"column":0},"generated":{"line":17,"column":0}},{"source":"node_modules/rxjs-compat/operator/finally.js","original":{"line":18,"column":0},"generated":{"line":18,"column":0}},{"source":"node_modules/rxjs-compat/operator/finally.js","original":{"line":19,"column":0},"generated":{"line":19,"column":0}},{"source":"node_modules/rxjs-compat/operator/finally.js","original":{"line":20,"column":0},"generated":{"line":20,"column":0}},{"source":"node_modules/rxjs-compat/operator/finally.js","original":{"line":21,"column":0},"generated":{"line":21,"column":0}},{"source":"node_modules/rxjs-compat/operator/finally.js","original":{"line":22,"column":0},"generated":{"line":22,"column":0}},{"source":"node_modules/rxjs-compat/operator/finally.js","original":{"line":23,"column":0},"generated":{"line":23,"column":0}},{"source":"node_modules/rxjs-compat/operator/finally.js","original":{"line":24,"column":0},"generated":{"line":24,"column":0}},{"source":"node_modules/rxjs-compat/operator/finally.js","original":{"line":25,"column":0},"generated":{"line":25,"column":0}},{"source":"node_modules/rxjs-compat/operator/finally.js","original":{"line":26,"column":0},"generated":{"line":26,"column":0}},{"source":"node_modules/rxjs-compat/operator/finally.js","original":{"line":27,"column":0},"generated":{"line":27,"column":0}},{"source":"node_modules/rxjs-compat/operator/finally.js","original":{"line":28,"column":0},"generated":{"line":28,"column":0}},{"source":"node_modules/rxjs-compat/operator/finally.js","original":{"line":29,"column":0},"generated":{"line":29,"column":0}},{"source":"node_modules/rxjs-compat/operator/finally.js","original":{"line":30,"column":0},"generated":{"line":30,"column":0}},{"source":"node_modules/rxjs-compat/operator/finally.js","original":{"line":31,"column":0},"generated":{"line":31,"column":0}},{"source":"node_modules/rxjs-compat/operator/finally.js","original":{"line":32,"column":0},"generated":{"line":32,"column":0}},{"source":"node_modules/rxjs-compat/operator/finally.js","original":{"line":33,"column":0},"generated":{"line":33,"column":0}},{"source":"node_modules/rxjs-compat/operator/finally.js","original":{"line":34,"column":0},"generated":{"line":34,"column":0}},{"source":"node_modules/rxjs-compat/operator/finally.js","original":{"line":35,"column":0},"generated":{"line":35,"column":0}},{"source":"node_modules/rxjs-compat/operator/finally.js","original":{"line":36,"column":0},"generated":{"line":36,"column":0}},{"source":"node_modules/rxjs-compat/operator/finally.js","original":{"line":37,"column":0},"generated":{"line":37,"column":0}},{"source":"node_modules/rxjs-compat/operator/finally.js","original":{"line":38,"column":0},"generated":{"line":38,"column":0}},{"source":"node_modules/rxjs-compat/operator/finally.js","original":{"line":39,"column":0},"generated":{"line":39,"column":0}},{"source":"node_modules/rxjs-compat/operator/finally.js","original":{"line":40,"column":0},"generated":{"line":40,"column":0}},{"source":"node_modules/rxjs-compat/operator/finally.js","original":{"line":41,"column":0},"generated":{"line":41,"column":0}},{"source":"node_modules/rxjs-compat/operator/finally.js","original":{"line":42,"column":0},"generated":{"line":42,"column":0}},{"source":"node_modules/rxjs-compat/operator/finally.js","original":{"line":43,"column":0},"generated":{"line":43,"column":0}},{"source":"node_modules/rxjs-compat/operator/finally.js","original":{"line":44,"column":0},"generated":{"line":44,"column":0}},{"source":"node_modules/rxjs-compat/operator/finally.js","original":{"line":45,"column":0},"generated":{"line":45,"column":0}},{"source":"node_modules/rxjs-compat/operator/finally.js","original":{"line":46,"column":0},"generated":{"line":46,"column":0}},{"source":"node_modules/rxjs-compat/operator/finally.js","original":{"line":47,"column":0},"generated":{"line":47,"column":0}},{"source":"node_modules/rxjs-compat/operator/finally.js","original":{"line":48,"column":0},"generated":{"line":48,"column":0}},{"source":"node_modules/rxjs-compat/operator/finally.js","original":{"line":49,"column":0},"generated":{"line":49,"column":0}},{"source":"node_modules/rxjs-compat/operator/finally.js","original":{"line":50,"column":0},"generated":{"line":50,"column":0}},{"source":"node_modules/rxjs-compat/operator/finally.js","original":{"line":51,"column":0},"generated":{"line":51,"column":0}},{"source":"node_modules/rxjs-compat/operator/finally.js","original":{"line":52,"column":0},"generated":{"line":52,"column":0}},{"source":"node_modules/rxjs-compat/operator/finally.js","original":{"line":53,"column":0},"generated":{"line":53,"column":0}},{"source":"node_modules/rxjs-compat/operator/finally.js","original":{"line":54,"column":0},"generated":{"line":54,"column":0}},{"source":"node_modules/rxjs-compat/operator/finally.js","original":{"line":55,"column":0},"generated":{"line":55,"column":0}},{"source":"node_modules/rxjs-compat/operator/finally.js","original":{"line":56,"column":0},"generated":{"line":56,"column":0}},{"source":"node_modules/rxjs-compat/operator/finally.js","original":{"line":57,"column":0},"generated":{"line":57,"column":0}},{"source":"node_modules/rxjs-compat/operator/finally.js","original":{"line":58,"column":0},"generated":{"line":58,"column":0}},{"source":"node_modules/rxjs-compat/operator/finally.js","original":{"line":59,"column":0},"generated":{"line":59,"column":0}},{"source":"node_modules/rxjs-compat/operator/finally.js","original":{"line":60,"column":0},"generated":{"line":60,"column":0}},{"source":"node_modules/rxjs-compat/operator/finally.js","original":{"line":61,"column":0},"generated":{"line":61,"column":0}},{"source":"node_modules/rxjs-compat/operator/finally.js","original":{"line":62,"column":0},"generated":{"line":62,"column":0}},{"source":"node_modules/rxjs-compat/operator/finally.js","original":{"line":63,"column":0},"generated":{"line":63,"column":0}},{"source":"node_modules/rxjs-compat/operator/finally.js","original":{"line":64,"column":0},"generated":{"line":64,"column":0}},{"source":"node_modules/rxjs-compat/operator/finally.js","original":{"line":65,"column":0},"generated":{"line":65,"column":0}},{"source":"node_modules/rxjs-compat/operator/finally.js","original":{"line":66,"column":0},"generated":{"line":66,"column":0}},{"source":"node_modules/rxjs-compat/operator/finally.js","original":{"line":67,"column":0},"generated":{"line":67,"column":0}},{"source":"node_modules/rxjs-compat/operator/finally.js","original":{"line":68,"column":0},"generated":{"line":68,"column":0}},{"source":"node_modules/rxjs-compat/operator/finally.js","original":{"line":69,"column":0},"generated":{"line":69,"column":0}},{"source":"node_modules/rxjs-compat/operator/finally.js","original":{"line":70,"column":0},"generated":{"line":70,"column":0}},{"source":"node_modules/rxjs-compat/operator/finally.js","original":{"line":71,"column":0},"generated":{"line":71,"column":0}},{"source":"node_modules/rxjs-compat/operator/finally.js","original":{"line":72,"column":0},"generated":{"line":72,"column":0}},{"source":"node_modules/rxjs-compat/operator/finally.js","original":{"line":73,"column":0},"generated":{"line":73,"column":0}},{"source":"node_modules/rxjs-compat/operator/finally.js","original":{"line":74,"column":0},"generated":{"line":74,"column":0}},{"source":"node_modules/rxjs-compat/operator/finally.js","original":{"line":75,"column":0},"generated":{"line":75,"column":0}},{"source":"node_modules/rxjs-compat/operator/finally.js","original":{"line":76,"column":0},"generated":{"line":76,"column":0}},{"source":"node_modules/rxjs-compat/operator/finally.js","original":{"line":77,"column":0},"generated":{"line":77,"column":0}},{"source":"node_modules/rxjs-compat/operator/finally.js","original":{"line":78,"column":0},"generated":{"line":78,"column":0}}],"sources":{"node_modules/rxjs-compat/operator/finally.js":"\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar operators_1 = require(\"rxjs/operators\");\n/**\n * Returns an Observable that mirrors the source Observable, but will call a specified function when\n * the source terminates on complete, error or unsubscribe.\n *\n * <span class=\"informal\">Ensure a given function will be called when a stream ends, no matter why it ended.</span>\n *\n * `finally` method accepts as a single parameter a function. This function does not accept any parameters and\n * should not return anything. It will be called whenever source Observable completes, errors or is unsubscribed,\n * which makes it good candidate to perform any necessary clean up or side effects when Observable terminates,\n * no matter how or why it terminated.\n *\n * Observable returned by `finally` will simply mirror source Observable - each time it is subscribed, source\n * Observable will be subscribed underneath.\n *\n * Note that behavior of `finally` will be repeated per every subscription, so if resulting Observable has\n * many subscribers, function passed to `finally` might be potentially called multiple times.\n *\n * Remember also that `finally` differs quite a lot from passing complete or error handler to {@link subscribe}. It will\n * return an Observable which can be further chained, while `subscribe` returns Subscription, basically ending Observable\n * chain. Function passed to `finally` will be called also when consumer of resulting Observable unsubscribes from it,\n * while handlers passed to `subscribe` will not (even complete handler). But most importantly, `finally` does not start\n * an execution of source Observable, like `subscribe` does, allowing you to set up all necessary hooks before\n * passing Observable further, even without specific knowledge how or when it will be used.\n *\n *\n * @example <caption>Call finally after complete notification</caption>\n * Rx.Observable.of(1, 2, 3)\n * .finally(() => console.log('I was finalized!'))\n * .map(x => x * 2) // `finally` returns an Observable, so we still can chain operators.\n * .subscribe(\n *   val => console.log(val),\n *   err => {},\n *   () => console.log('I completed!')\n * );\n *\n * // Logs:\n * // 1\n * // 2\n * // 3\n * // \"I completed!\"\n * // \"I was finalized!\"\n *\n *\n *\n * @example <caption>Call finally after consumer unsubscribes</caption>\n * const o = Rx.Observable.interval(1000)\n * .finally(() => console.log('Timer stopped'));\n *\n * const subscription = o.subscribe(\n *   val => console.log(val),\n *   err => {},\n *   () => console.log('Complete!') // Will not be called, since complete handler\n * );                               // does not react to unsubscription, just to\n *                                  // complete notification sent by the Observable itself.\n *\n * setTimeout(() => subscription.unsubscribe(), 2500);\n *\n * // Logs:\n * // 0 after 1s\n * // 1 after 2s\n * // \"Timer stopped\" after 2.5s\n *\n * @see {@link using}\n *\n * @param {function} callback Function to be called when source terminates (completes, errors or is unsubscribed).\n * @return {Observable} An Observable that mirrors the source, but will call the specified function on termination.\n * @method finally\n * @name finally\n * @owner Observable\n */\nfunction _finally(callback) {\n    return operators_1.finalize(callback)(this);\n}\nexports._finally = _finally;\n//# sourceMappingURL=finally.js.map"},"lineCount":78}},"hash":"6d38347f212e4ffe3ac25bbfd98ec731","cacheData":{"env":{}}}